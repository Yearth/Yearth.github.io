<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端造轮子【1】 —— vue-router</title>
      <link href="/2020/08/07/2020-08-07_2/"/>
      <url>/2020/08/07/2020-08-07_2/</url>
      
        <content type="html"><![CDATA[<p>今天我们来研究一下 vue-router 的内部实现原理。</p><p>我们知道，vue app 是 spa，是没有页面之间的跳转的，说的直白一点就是没有刷新。那么在不刷新页面的情况下，怎么实现一个项目中，不同页面，不同组件之间的切换展示呢？</p><p>通过学习 vue-router 的源码，可以得知，浏览器为我们提供了两个方案：</p><ul><li>hash（就是页面上的 #）</li><li>history（h5）</li></ul><p>今天我们就简单来实现一下通过 hash 的方式实现 vue 的路由跳转。</p><a id="more"></a><h2 id="Step-1-需求分析"><a href="#Step-1-需求分析" class="headerlink" title="Step 1 - 需求分析"></a>Step 1 - 需求分析</h2><p>首先通过 vue-cli 4.x 创建项目，选择使用 router，并且模式选择为 hash。</p><p>项目创建完成后，我们可以看到 src 目录下有一个 router 文件，其内容大致如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;./yvue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/About.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>我们逐步来分析一下上面的代码：</p><ul><li>首先是用过 Vue.use(VueRouter) 注册了插件，那么显然 <strong>VueRouter 是 Vue 的插件</strong>，需要有自己的<strong>静态 install 方法</strong></li><li>接着是我们熟悉的，配置了路有映射表，用于确定路由和组件的关系</li><li>然后通过 new VueRouter({routers}) 创建了路由实例，并且将其导出</li><li>最后熟悉 vue 的同学肯定知道，导出的这个 vue，我们在 main 中将其引用并且传递给了 Vue 本身</li></ul><p>上述流程非常简单，那么从 VueRouter 的角度出发，我们应该做些什么呢？</p><p>首先这里 Vue.use 的时候会调用 VueRouter.install 方法，而在这个方法里我们应该做些什么呢？</p><p>联合 vue-router 的使用我们知道，注册 router 之后，我们可以全局使用两个组件：</p><ul><li>router-view：用于显示组件</li><li>router-link：用于路由跳转</li></ul><p>显然，这两个组件的注册过程是在 install 中，因为这里拥有对全局 Vue 的引用。</p><p>接下来，就是 router 的核心功能，当 hash 改变的时候，改变展示的组件，显然这里我们应该有一个响应式的 current，当 current 改变的时候，就触发 render 重新渲染组件。</p><p>以上，我们可以大致总结一下，如下图所示：</p><p><img src="https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F60eca3e4-2504-42d5-80dc-5b1a29c6d716%2FUntitled.png?table=block&id=69e2386c-541d-4404-958d-0fc65353f69a&name=Untitled.png&cache=v2"></p><h2 id="Step-2-功能实现"><a href="#Step-2-功能实现" class="headerlink" title="Step 2 - 功能实现"></a>Step 2 - 功能实现</h2><p>那么现在我们可以着手开始实现自己的 vue-router 了。</p><p>首先我们肯定需要一个 VueRouter 的类，应为在后面它需要被实例化：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 对应 Vue.use</span></span><br><span class="line">  <span class="keyword">static</span> install(Vue) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对应 new</span></span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着我们就可以在 install 中实现对两个全局组件的注册：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对应 Vue.use</span></span><br><span class="line">    <span class="keyword">static</span> install(Vue)&#123;</span><br><span class="line">        <span class="comment">// step 1: 注册组件 router-link，用于路由跳转</span></span><br><span class="line">        <span class="comment">// 回忆一下 router-link 的使用：</span></span><br><span class="line">        <span class="comment">// * &lt;router-link to=&quot;/login&quot;&gt;login&lt;/router-link&gt;</span></span><br><span class="line">        Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">// 必要参数 to</span></span><br><span class="line">      props: &#123;</span><br><span class="line">        to: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          <span class="built_in">require</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 模板，可以使用 template，也可以使用 render。</span></span><br><span class="line">      <span class="comment">// * render 更加灵活，并且在 vue 中会把 template 编译成 render 函数。</span></span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="comment">// 这里可以写 jsx，也可以使用 h 函数</span></span><br><span class="line">        <span class="comment">// 这里我们使用 jsx，在 view-router 中使用 h，都尝试一下</span></span><br><span class="line">        <span class="comment">// * h 函数类似于 react 中的 createElement</span></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;</span>`#$&#123;<span class="attr">this.to</span>&#125;`&#125;&gt;</span>&#123;this.$slots.default&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// step 2: 注册组件 router-view，用于显示组件</span></span><br><span class="line">            <span class="comment">// 回忆一下 router-link 的使用：</span></span><br><span class="line">            <span class="comment">// &lt;router-view /&gt;</span></span><br><span class="line">            Vue.component(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">// 没有参数，直接 template</span></span><br><span class="line">      render(h) &#123;</span><br><span class="line">        <span class="comment">// 这里使用 h</span></span><br><span class="line">        <span class="comment">// view-router 的功能是渲染组件，那么组件从哪里获取呢？</span></span><br><span class="line">        <span class="comment">// 回忆 router.js 的路由表，其中有映射 url 地址和组件，所以组件显然是从这里获取</span></span><br><span class="line">        <span class="comment">// 而当前路由我们可以在构造函数中定义一个 current 来表示</span></span><br><span class="line">        <span class="comment">// 所以可以通过以下代码找到当前 current 对应的组件</span></span><br><span class="line">        <span class="keyword">const</span> &#123; routeMap, current &#125; = <span class="built_in">this</span>.$router</span><br><span class="line">        <span class="keyword">const</span> component = routeMap[current] ? routeMap[current].component : <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> h(component)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，至少我们的 <router-link> 已经是可用的了，而 <router-view> 则需要我们在构造函数中实现对路由表的管理以及对 hashchange 的监听。</p><p>那么接下来自然是实现 constructor</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对应 new</span></span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// 初始化路由表</span></span><br><span class="line">    <span class="built_in">this</span>.routerMap = &#123;&#125;</span><br><span class="line">    options.routes.map(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.routerMap[route.path] = route</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 current</span></span><br><span class="line">    <span class="keyword">const</span> current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 hashchange</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="built_in">this</span>.onHashChange.bind(<span class="built_in">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onHashChange() &#123;</span><br><span class="line">    <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，整个 vue-router 已经实现得差不多了，但还存在这一个巨大的问题，那就是 current 并不是响应式的，当路由切换，current 改变的时候，并不会触发 render 重新渲染组件：</p><p><img src="https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2d5f78cf-5c37-4aa4-a9cd-701e0fc59193%2F20200804_114704.gif?table=block&id=dcb77b60-e4b2-4e30-8f20-9a6cc6cecbd9&name=20200804_114704.gif&cache=v2"></p><p>那应该怎么办呢？</p><p>接下来的问题是：<strong>怎么将 current 转成 vue 响应式数据？</strong></p><p>对于上述问题，这里有两个思路：</p><ul><li>新建 vue 实例，通过 data 将 current 转成响应式数据</li><li>利用 vue 提供的静态方法 <strong>Vue.util.defineReactive</strong></li></ul><p>这里我们采取第二种方案：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对应 new</span></span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// 初始化路由表</span></span><br><span class="line">    <span class="built_in">this</span>.routerMap = &#123;&#125;</span><br><span class="line">    options.routes.map(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.routerMap[route.path] = route</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 current</span></span><br><span class="line">    <span class="keyword">const</span> initial = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    Vue.util.defineReactive(<span class="built_in">this</span>, <span class="string">&#x27;current&#x27;</span>, initial)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 hashchange</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="built_in">this</span>.onHashChange.bind(<span class="built_in">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onHashChange() &#123;</span><br><span class="line">    <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里又出现一个问题，这个 Vue 从哪里来呢？</p><p>其实这里需要让思维跳出 constructor：我们知道执行 install 的时候会传入 Vue，那么在 install 的时候我们保存一个全局变量 _Vue 即可在 constructor 中进行使用了：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对应 new</span></span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// 初始化路由表</span></span><br><span class="line">    <span class="built_in">this</span>.routerMap = &#123;&#125;</span><br><span class="line">    options.routes.map(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.routerMap[route.path] = route</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 current</span></span><br><span class="line">    <span class="keyword">const</span> initial = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    _Vue.util.defineReactive(<span class="built_in">this</span>, <span class="string">&#x27;current&#x27;</span>, initial)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 hashchange</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="built_in">this</span>.onHashChange.bind(<span class="built_in">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onHashChange() &#123;</span><br><span class="line">    <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，基本的路由已经实现了：</p><p><img src="https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fef5b0447-bf3f-4b40-a525-347d5cefb018%2F20200804_134007.gif?table=block&id=0716b1fc-78ea-4d35-b7cb-0c9f4f16818e&name=20200804_134007.gif&cache=v2"></p><p>还有一些可以扩展的地方：</p><p>比如优化一下 constructor，将 options 保存到本地：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line">    <span class="comment">// 初始化路由表</span></span><br><span class="line">    <span class="built_in">this</span>.routerMap = &#123;&#125;</span><br><span class="line">    <span class="built_in">this</span>.$options.routes.map(<span class="function">(<span class="params">route</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.routerMap[route.path] = route</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 current</span></span><br><span class="line">    <span class="keyword">const</span> initial = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  _Vue.util.defineReactive(<span class="built_in">this</span>, <span class="string">&#x27;current&#x27;</span>, initial)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 hashchange</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="built_in">this</span>.onHashChange.bind(<span class="built_in">this</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这可以保证数据的单向流动。</p><p>比如为组件实例挂载 $router，这样我们就可以像 this.$router.push() 这样使用 router 上的方法了。</p><p>不过这里有一个点值得注意，那就是时间：</p><p>因为当我们执行 install 的时候，VueRouter 的实例还没创建，那么直接通过：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$router = <span class="built_in">this</span>.$options.router</span><br></pre></td></tr></table></figure><p>进行挂载显然是不行的。</p><p>这里我们可以借助 mixin 来使用 Vue 的生命周期钩子，当组件创建之前进行挂载操作：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$options.router) &#123;</span><br><span class="line">      Vue.prototype.$router = <span class="built_in">this</span>.$options.router</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样就没什么问题了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 爬坑之旅【2】 —— 网站配置</title>
      <link href="/2020/08/07/2020-08-07_1/"/>
      <url>/2020/08/07/2020-08-07_1/</url>
      
        <content type="html"><![CDATA[<p>前面已经将网站的基本架子搭好了，但通用的配置显然并不适用于每一个人，这里就通过配置文件稍微自定义一下。</p><a id="more"></a><h2 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h2><p>目标文件：root/ _config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">世界的侧面</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">初心Yearth</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">https://s1.ax1x.com/2020/08/06/agXE9K.png</span></span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>目标文件：root/themes/volantis/_config.yml</p><h3 id="封面配置"><a href="#封面配置" class="headerlink" title="封面配置"></a>封面配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">    <span class="attr">M title:</span> <span class="string">&#x27;标题&#x27;</span></span><br><span class="line">    <span class="string">M</span> <span class="comment"># subtitle: &#x27;&#x27;</span></span><br><span class="line">    <span class="attr">M search:</span> <span class="string">你想看点什么呢？</span></span><br><span class="line">    <span class="string">M</span> <span class="comment"># features: // 这个选项是搜索框下的导航按钮，这里选择注释掉</span></span><br></pre></td></tr></table></figure><h2 id="导航栏配置"><a href="#导航栏配置" class="headerlink" title="导航栏配置"></a>导航栏配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">navbar:</span></span><br><span class="line">    <span class="attr">logo:</span></span><br><span class="line">        <span class="attr">img:</span></span><br><span class="line">        <span class="attr">icon:</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">&#x27;标题&#x27;</span></span><br><span class="line">    <span class="attr">menu:</span></span><br><span class="line">        <span class="string">M</span> <span class="comment"># - name: 博客</span></span><br><span class="line">        <span class="string">M</span> <span class="comment"># icon: fas fa-rss</span></span><br><span class="line">        <span class="string">M</span> <span class="comment"># url: /</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">分类</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">tags/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">标签</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">tags/</span></span><br><span class="line">        <span class="string">M</span> <span class="comment"># - name: 归档</span></span><br><span class="line">    <span class="string">M</span> <span class="comment"># icon: fas fa-archive</span></span><br><span class="line">    <span class="string">M</span> <span class="comment"># url: archives/</span></span><br><span class="line">        <span class="string">M</span> <span class="comment"># - name: 友链</span></span><br><span class="line">    <span class="string">M</span> <span class="comment"># icon: fas fa-link</span></span><br><span class="line">    <span class="string">M</span> <span class="comment"># url: friends/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">关于</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-info-circle</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">about/</span></span><br><span class="line">        <span class="attr">search:</span> <span class="string">你想看点什么呢？</span></span><br></pre></td></tr></table></figure><h2 id="布局配置"><a href="#布局配置" class="headerlink" title="布局配置"></a>布局配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">layout:</span></span><br><span class="line"><span class="attr">on_page:</span></span><br><span class="line"><span class="attr">M body:</span> [<span class="string">article</span>]</span><br></pre></td></tr></table></figure><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line"><span class="attr">backstretch:</span></span><br><span class="line"><span class="attr">M position:</span> <span class="string">fixed</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">M id:</span> <span class="number">170672512</span></span><br><span class="line"><span class="attr">M autoplay:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F030e52f5-b2d0-4a4f-b55c-0a3b58e04239%2FUntitled.png?table=block&id=b9f55037-fcbd-4e24-842a-695381f423db&name=Untitled.png&cache=v2"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 爬坑之旅【1】 —— 基础搭建</title>
      <link href="/2020/08/07/2020-08-06/"/>
      <url>/2020/08/07/2020-08-06/</url>
      
        <content type="html"><![CDATA[<p>没有一个自己的个人博客，显然是不够程序员的，于是今天在一番折腾之下，通过 Github + Hexo 配置了一个在线的博客，特此记录。当然如果喜欢更加偏向文档风格的童鞋，可以选择 Vuepress。</p><a id="more"></a><h2 id="Step-1-Hexo-本地安装及运行测试"><a href="#Step-1-Hexo-本地安装及运行测试" class="headerlink" title="Step 1 - Hexo 本地安装及运行测试"></a>Step 1 - Hexo 本地安装及运行测试</h2><p>首先全局安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装好之后使用 Hexo 创建一个目录，用于构建个人博客网站，这里我们就叫 daily_record：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init daily_record</span><br></pre></td></tr></table></figure><p>接下来进入到博客目录下，安装依赖，运行即可查看初始状态了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> daily_record</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>如果上述步骤没有出错的话，应该可以在本地的 4000 端口看到如下界面：</p><p><img src="https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F35c84369-6339-46b8-a300-10693b7e875e%2FUntitled.png?table=block&id=f2429731-a74f-4f44-a6fc-f0ef9abb2c60&name=Untitled.png&cache=v2"></p><h2 id="Step-2-更换-Volantis-主题"><a href="#Step-2-更换-Volantis-主题" class="headerlink" title="Step 2 - 更换 Volantis 主题"></a>Step 2 - 更换 Volantis 主题</h2><p>想必你也觉得默认主题有点 low。(毕竟是多年前的产物了，有点跟不上时代的审美)</p><p>好在 Hexo 生态足够丰富，有很多优秀的主题，比如 Volantis。</p><p>接下来进入到项目的根目录，开始安装主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xaoxuu/hexo-theme-volantis themes/volantis</span><br></pre></td></tr></table></figure><p>下载好之后，修改根目录下的 _config.yml 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="string">+</span> <span class="attr">theme:</span> <span class="string">volantis</span></span><br></pre></td></tr></table></figure><p>然后安装一些依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search hexo-generator-json-content hexo-renderer-stylus -S</span><br></pre></td></tr></table></figure><p>现在重新启动服务，你的网站应该变成了这样</p><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/f9d35ec4-0bdc-4e1e-9280-3cba80f5a71b/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5/20200806/us-west-2/s3/aws4_request&X-Amz-Date=20200806T092415Z&X-Amz-Expires=86400&X-Amz-Signature=e700ffe5b7313d847e6e4c4cbe29bc33a20307aa9ce3ddf0e1606bead705d98e&X-Amz-SignedHeaders=host&response-content-disposition=filename%20=%22Untitled.png%22"></p><h2 id="Step-3-部署到-Gitub"><a href="#Step-3-部署到-Gitub" class="headerlink" title="Step 3 - 部署到 Gitub"></a>Step 3 - 部署到 Gitub</h2><p>这个主题有很多配置，具体可以参考<a href="https://volantis.js.org/v2/getting-started/">官方文档</a>，这里就还不在赘述。</p><p>要将个人主页部署到 Github，首先我们要去 Github 创建一个 yourname.github.io 的仓库。</p><p>需要注意的是，yourname 一定要和你的 github name 完全一样，并且一定要选择初始化项目</p><p>然后安装 Hexo 的部署插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git -S</span><br></pre></td></tr></table></figure><p>安装好之后，修改根目录下的 _config.yml 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">repo:</span> <span class="string">https://github.com/yourname/yourname.github.io</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>最后通过以下命令即可一键部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h2 id="Step-4-访问个人主页"><a href="#Step-4-访问个人主页" class="headerlink" title="Step 4 - 访问个人主页"></a>Step 4 - 访问个人主页</h2><p>接下来就可以在下面的地址访问你的个人主页了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yourname.github.io/</span><br></pre></td></tr></table></figure><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/0c0da1b1-57a7-4899-b0ef-f345e46af4a4/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5/20200806/us-west-2/s3/aws4_request&X-Amz-Date=20200806T092430Z&X-Amz-Expires=86400&X-Amz-Signature=ff4f20c6532b8aca669d0b867b9a2ad3945e685fbecde46bf7f2546da0b5f47a&X-Amz-SignedHeaders=host&response-content-disposition=filename%20=%22Untitled.png%22"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
